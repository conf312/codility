You are given N counters, initially set to 0, and you have two possible operations on them:

increase(X) − counter X is increased by 1,
max counter − all counters are set to the maximum value of any counter.
A non-empty array A of M integers is given. This array represents consecutive operations:

if A[K] = X, such that 1 ≤ X ≤ N, then operation K is increase(X),
if A[K] = N + 1 then operation K is max counter.
For example, given integer N = 5 and array A such that:

    A[0] = 3
    A[1] = 4
    A[2] = 4
    A[3] = 6
    A[4] = 1
    A[5] = 4
    A[6] = 4
the values of the counters after each consecutive operation will be:

    (0, 0, 1, 0, 0)
    (0, 0, 1, 1, 0)
    (0, 0, 1, 2, 0)
    (2, 2, 2, 2, 2)
    (3, 2, 2, 2, 2)
    (3, 2, 2, 3, 2)
    (3, 2, 2, 4, 2)
The goal is to calculate the value of every counter after all operations.

Write a function:

class Solution { public int[] solution(int N, int[] A); }

that, given an integer N and a non-empty array A consisting of M integers, returns a sequence of integers representing the values of the counters.

Result array should be returned as an array of integers.

For example, given:

    A[0] = 3
    A[1] = 4
    A[2] = 4
    A[3] = 6
    A[4] = 1
    A[5] = 4
    A[6] = 4
the function should return [3, 2, 2, 4, 2], as explained above.

Write an efficient algorithm for the following assumptions:

N and M are integers within the range [1..100,000];
each element of array A is an integer within the range [1..N + 1].

====================================================================

여기로 전화해야 하나요?
처음에는 0으로 설정된 N개의 카운터가 지정되며 카운터에 대해 다음 두 가지 작업을 수행할 수 있습니다.

증가(X) - 카운터 X가 1 증가합니다.
최대 카운터 - 모든 카운터는 카운터의 최대값으로 설정됩니다.
비어 있지 않은 M 정수의 배열 A가 주어집니다. 이 배열은 연속 연산을 나타냅니다.

A[K] = X, 즉 1 ≤ X ≤ N이면 연산 K는 증가한다(X).
A[K] = N + 1이면 작업 K는 최대 카운터입니다.
예를 들어, 정수 N = 5 및 배열 A가 주어지면 다음과 같다.
    N[0] = 0︎ = 2, max = 2
    N[1] = 0︎
    N[2] = 0︎ = 1, max = 1
    N[3] = 0 = 2, max = 2
    n[4] = 0

    A[0] = 3︎
    A[1] = 4︎
    A[2] = 4︎
    A[3] = 6, lastmax = 1
    A[4] = 1︎
    A[5] = 4︎
    A[6] = 4
연속 작업 후 카운터 값은 다음과 같습니다.

    (0, 0, 1, 0, 0)
    (0, 0, 1, 1, 0)
    (0, 0, 1, 2, 0)
    (2, 2, 2, 2, 2)
    (3, 2, 2, 2, 2)
    (3, 2, 2, 3, 2)
    (3, 2, 2, 4, 2)
목표는 모든 연산 후에 모든 카운터의 값을 계산하는 것입니다.

함수 쓰기:

클래스 솔루션 {public int[] 솔루션(int N, int[] A), }

즉, 정수 N과 M 정수로 구성된 비어 있지 않은 배열 A가 주어지면 카운터의 값을 나타내는 정수 시퀀스를 반환합니다.

결과 배열은 정수의 배열로 반환되어야 합니다.

예를 들어, 다음과 같습니다.

    A[0] = 3
    A[1] = 4
    A[2] = 4
    A[3] = 6
    A[4] = 1
    A[5] = 4
    A[6] = 4
함수는 위에서 설명한 대로 [3, 2, 2, 4, 2]를 반환해야 합니다.

다음 가정을 위한 효율적인 알고리즘을 작성하십시오.

N과 M은 [1] 범위의 정수입니다.100,000];
배열 A의 각 요소는 [1] 범위 내의 정수입니다.N + 1]