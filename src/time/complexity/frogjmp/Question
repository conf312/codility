A small frog wants to get to the other side of the road.
The frog is currently located at position X and wants to get to a position greater than or equal to Y.
The small frog always jumps a fixed distance, D.

Count the minimal number of jumps that the small frog must perform to reach its target.

Write a function:

class Solution { public int solution(int X, int Y, int D); }

that, given three integers X, Y and D, returns the minimal number of jumps from position X to a position equal to or greater than Y.

For example, given:

  X = 10
  Y = 85
  D = 30
the function should return 3, because the frog will be positioned as follows:

after the first jump, at position 10 + 30 = 40
after the second jump, at position 10 + 30 + 30 = 70
after the third jump, at position 10 + 30 + 30 + 30 = 100
Write an efficient algorithm for the following assumptions:

X, Y and D are integers within the range [1..1,000,000,000];
X ≤ Y.


======================================================================================


작은 개구리가 길 반대편으로 가고 싶어 합니다.
개구리는 현재 X 위치에 있으며 Y보다 크거나 같은 위치로 이동하려고 합니다.
작은 개구리는 항상 일정한 거리인 D를 뛴다.

작은 개구리가 목표에 도달하기 위해 수행해야 하는 최소 점프 횟수를 세어보세요.

함수 쓰기:

클래스 솔루션 {public int 솔루션(int X, int Y, int D); }

즉, 정수 X, Y, D가 주어졌을 때 위치 X에서 Y보다 크거나 같은 최소 점프 수를 반환합니다.

예를 들어, 다음과 같습니다.

  X = 10
  Y = 85
  D = 30
개구리는 다음과 같은 위치에 있으므로 함수가 3을 반환해야 합니다.

첫 번째 점프 후, 10 + 30 = 40 위치에서
두 번째 점프 후 10 + 30 + 30 = 70
10 + 30 + 30 + 30 + 30 = 100
다음 가정을 위한 효율적인 알고리즘을 작성하십시오.

X, Y, D는 [1.1,000,000,000] 범위의 정수입니다.
X y Y.